# Home Assignment #

rm(list=ls())

# Download the relevant packages
packages = c("ggplot2",
             "readr",
             "tidyverse",
             "dplyr",
             "here",
             "lubridate")

## Now load or install&load all
package.check <- lapply(
  packages,
  FUN = function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)
# ------------------------------------------------------------------------------ #
# Download data from Sources:

url <- "https://github.com/statistikat/coronaDAT/raw/master/archive/20211216/data/20211216_140201_orig_csv_ages.zip"
temp <- tempfile()
download.file(url, temp)

# function to unzip files

#Unzip Covid Faelle Timeline
unzip(temp, "CovidFaelle_Timeline.csv")
covidfaelle_timeline <- read.csv("CovidFaelle_Timeline.csv", sep = ";",encoding = "UTF-8")

#Unzip Hospitalisierungen
unzip(temp, "Hospitalisierung.csv")
hospitalisierungen <- read.csv("Hospitalisierung.csv", sep = ";",encoding = "UTF-8")

unlink(temp)


# Download data from Sources (Impfungen):
url <- "https://github.com/statistikat/coronaDAT/raw/master/archive/20211211/data/20211211_235959_impfdaten_orig_csv_bmsgpk.zip"
temp <- tempfile()
download.file(url, temp)
#Unzip Covid impfungen
unzip(temp, "filef911f41aca2d7.csv")
impfungen <- read.csv("filef911f41aca2d7.csv",sep = ";",encoding = "UTF-8")
unlink(temp)


rm(package.check, packages, temp, url)

# ------------------------------------------------------------------------------ #

# DATA CLEANING AND MERGING 

# Rename the columns names in the datasets
names(impfungen)[names(impfungen) == 'X.U.FEFF.Datum'] <- 'Meldedatum'
names(covidfaelle_timeline)[names(covidfaelle_timeline) == 'X.U.FEFF.Time'] <- 'Meldedatum'
names(hospitalisierungen)[names(hospitalisierungen) == 'X.U.FEFF.Meldedatum'] <- 'Meldedatum'


# Remove unncessary columns in the datasets
covidfallzahlen$MeldeDatum <- NULL


# Vaccination rate per state 
vaccination_per_state <- impfungen %>% 
  mutate(Gemeindecode = as.numeric(substr(as.character(Gemeindecode), 1, 1))) %>%
  group_by(Gemeindecode, Meldedatum) %>% 
  summarise(Bevölkerung = sum(Bevölkerung),
            gültige_zertifikate = sum(Vollimmunisierte)) %>% 
  mutate(Meldedatum = as.Date(substr(Meldedatum, 1, 10)))
colnames(vaccination_per_state) <- c(
  "state_id", "date", "state_population",
  "valid_certificates"
)



# Covid cases
covid_cases <- covidfaelle_timeline %>% 
  select(one_of(c(
    "Meldedatum", "Bundesland", "BundeslandID",
    "AnzEinwohner", "AnzahlFaelle", "AnzahlTotTaeglich", "AnzahlGeheiltTaeglich"
  ))) %>% 
  mutate(Meldedatum = substr(Meldedatum, 1, 10)) %>% 
  mutate(Meldedatum = as.Date(Meldedatum, "%d.%m.%Y"))
colnames(covid_cases) <- c(
  "date", "state", "state_id", "state_population",
  "state_cases", "state_deaths", "state_convalescent"
)


# Hospitalizations
hospitalization <- hospitalisierungen %>% 
  select(one_of(c(
    "Meldedatum", "Bundesland", "BundeslandID",
    "NormalBettenBelCovid19", "IntensivBettenBelCovid19"
  ))) %>% 
  mutate(Meldedatum = substr(Meldedatum, 1, 10)) %>% 
  mutate(Meldedatum = as.Date(Meldedatum, "%d.%m.%Y"))
colnames(hospitalization) <- c(
  "date", "state", "state_id", "inpatient", "icu"
)

# Merge datasets
df <- covid_cases %>% 
  left_join(hospitalization) %>% 
  left_join(vaccination_per_state) %>% 
  arrange(date, state_id) %>% 
  group_by(state_id)



# remove unncessary datasets
rm(covidfaelle_timeline, impfungen, hospitalisierungen, hospitalization, vaccination_per_state, covid_cases)

# Make a subset with the date "11.12.2021" because this is the only day we have the vaccination.
# We were not able to merge all datasets to receive the vaccinations for every day
data <- filter(df, date == "2021-12-11")

# ------------------------------------------------------------------------------ #
# ------------------------------------------------------------------------------ #
# ------------------------------------------------------------------------------ #



# 1. Questions why naive?
It is called naive because Naive Bayes makes the very strong assumption that all input variables are independent from each other, which is not always the case.

# 2. Question: Vaccine effectiveness parameter



# P(H) = (number of covid patients in hospital) / (population)

c_h <- max(data$inpatient)
p <- max(data$state_population)
p_h <- c_h/p

# Propability of being vaccinated
# P(V) = (number of fully vacinated) / (population) --> already calculated in the impfungen.csv file

v <- sum(data$valid_certificates, na.rm=T)
p_v <- v/p

# ------------------------------------------------------------------------------ #
# Probability of being vaccinated, given hospitalization
# P(V|H) = (number of vaccinated covid patients in hospital) / (covid patients)

c <- max(data$state_cases)
p_v_h <- 0.04 # Assumption

# P(V|H) = (number of vaccinated covid patients in hospital) / (covid patients)
# P(H) = (number of covid patients in hospital) / (population)
# P(V) = (number of fully vacinated) / (population)


#define function for Bayes' Theorem
bayesTheorem <- function(pVH, pH, pV) {
  pHV <- (pVH * pH) / (pV/100)
  return(pHV)
}


#use function to calculate conditional probability
bayesTheorem(p_v_h, p_h, p_v)



# The result shows, that a Person who is vaccinated has a 0,1% chance of getting hospitalized.






















